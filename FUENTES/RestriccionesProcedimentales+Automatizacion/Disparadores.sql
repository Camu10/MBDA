/*         INSERTAR   			*/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID DE AUTORES
CREATE OR REPLACE TRIGGER AUTOAUTORES
BEFORE INSERT ON autores 
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM autores;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID DE ANIMES
CREATE OR REPLACE TRIGGER AUTOANIMES
BEFORE INSERT ON animes 
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM animes;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID DE PERSONAJES
CREATE OR REPLACE TRIGGER AUTOPERSONAJES
BEFORE INSERT ON personajes
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM personajes;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID DE ROPA
CREATE OR REPLACE TRIGGER AUTOROPA
BEFORE INSERT ON ropa
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM ropa;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID DE PROVEEDORES
CREATE OR REPLACE TRIGGER AUTOPROVEEDORES
BEFORE INSERT ON proveedores
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM proveedores;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID DE FIGURAS
CREATE OR REPLACE TRIGGER AUTOFIGURAS
BEFORE INSERT ON figuras
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM figuras;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID TARJETADESCUENTO
CREATE OR REPLACE TRIGGER AUTOTARJETADESCUENTO
BEFORE INSERT ON tarjetadescuento
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM tarjetadescuento;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID VENTAS
CREATE OR REPLACE TRIGGER AUTOVENTAS
BEFORE INSERT ON ventas
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM ventas;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID SEDES
CREATE OR REPLACE TRIGGER AUTOSEDES
BEFORE INSERT ON sedes
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM sedes;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID EJEMPLARES
CREATE OR REPLACE TRIGGER AUTOEJEMPLARES
BEFORE INSERT ON ejemplares
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM ejemplares;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID COMPRAS
CREATE OR REPLACE TRIGGER AUTOCOMPRAS
BEFORE INSERT ON compras
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM compras;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID EMPLEADOS
CREATE OR REPLACE TRIGGER AUTOEMPLEADOS
BEFORE INSERT ON empleados
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM empleados;
END;
/
--SE DEBE GENERAR AUTOMATICAMENTE LA ID CONTRATOS
CREATE OR REPLACE TRIGGER AUTOCONTRATOS
BEFORE INSERT ON contratos
FOR EACH ROW
BEGIN 
	SELECT COUNT(id)+1 INTO :NEW.id FROM contratos;
END;
/


/*	         ACTUALIZAR   			*/
--NO SE PERMITE ACTUALIZAR ANIMES
CREATE OR REPLACE TRIGGER NO_UPD_ANIMES
BEFORE UPDATE ON animes
FOR EACH ROW
BEGIN
	RAISE_APPLICATION_ERROR(-20002,'ACTUALIZACION NO PERMITIDA');
END;
/
--NO SE PERMITE ACTUALIZAR AUTORES
CREATE OR REPLACE TRIGGER NO_UPD_AUTORES
BEFORE UPDATE ON autores
FOR EACH ROW
BEGIN 
	RAISE_APPLICATION_ERROR(-20002,'ACTUALIZACION NO PERMITIDA');
END;
/
--NO SE PERMITE ACTUALIZAR PROVEEDORES
CREATE OR REPLACE TRIGGER NO_UPD_PROVEEDORES
BEFORE UPDATE ON proveedores
FOR EACH ROW
BEGIN 
	RAISE_APPLICATION_ERROR(-20002,'ACTUALIZACION NO PERMITIDA');
END;
/
--NO SE PERMITE ACTUALIZAR VENTAS
CREATE OR REPLACE TRIGGER NO_UPD_VENTAS
BEFORE UPDATE ON ventas
FOR EACH ROW
BEGIN 
	RAISE_APPLICATION_ERROR(-20002,'ACTUALIZACION NO PERMITIDA');
END;
/
--NO SE PERMITE ACTUALIZAR COMPRAS
CREATE OR REPLACE TRIGGER NO_UPD_COMPRAS
BEFORE UPDATE ON compras
FOR EACH ROW
BEGIN 
	RAISE_APPLICATION_ERROR(-20002,'ACTUALIZACION NO PERMITIDA');
END;
/
--NO SE PERMITE ACTUALIZAR CONTRATOS
CREATE OR REPLACE TRIGGER NO_UPD_CONTRATOS
BEFORE UPDATE ON contratos
FOR EACH ROW
BEGIN 
    IF :OLD.tipo = :NEW.tipo THEN
        RAISE_APPLICATION_ERROR(-20002,'EL CONTRATO TIENE QUE SER DE DIERENTE TIPO AL ANTIGUO');
    END IF;
END;
/
--NO SE PERMITE ACTUALIZAR PERSONAS
CREATE OR REPLACE TRIGGER NO_UPD_PERSONAS
BEFORE UPDATE ON personas
FOR EACH ROW
BEGIN 
	RAISE_APPLICATION_ERROR(-20002,'ACTUALIZACION NO PERMITIDA');
END;
/
CREATE OR REPLACE TRIGGER UPD_SEDES_DIRECCION
BEFORE UPDATE ON sedes
FOR EACH ROW
BEGIN 
    IF :OLD.direccion = :NEW.direccion THEN
        RAISE_APPLICATION_ERROR(-20003,'LA NUEVA DEBE DIRECCION SER DIFERENTE A LA ANTIGUA');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER UPD_PERSONAS_TIPODOC
BEFORE UPDATE ON personas
FOR EACH ROW
BEGIN 
    IF :OLD.tipodoc = 'CC' THEN
        RAISE_APPLICATION_ERROR(-20005,'NO SE PUEDE CAMBIAR EL TIPO DE DOCUMENTO');
    END IF;
    IF :OLD.tipodoc = 'TI' AND :NEW.tipodoc != 'CC' THEN
        RAISE_APPLICATION_ERROR(-20005,'NO SE PUEDE CAMBIAR EL TIPO DE DOCUMENTO');
    END IF;
END;
/
/*				ELIMINAR						*/
CREATE OR REPLACE TRIGGER NO_DEL_ANIMES
BEFORE DELETE ON animes
BEGIN 
	RAISE_APPLICATION_ERROR(-20004,'NO ESTA PERMITIDO ELIMINAR ANIMES');
END;
/